// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BarkerSharper.Model;
//
//    var barkNotificationPostModel = BarkNotificationExtendedModel.FromJson(jsonString);

using BarkerSharper.Data;
using BarkerSharper.Interfaces;

namespace BarkerSharper.Model
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public class BarkNotificationBaseModel : IValidatable
    {
        [JsonProperty("body")]
        public string Body { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("device_keys", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> DeviceKeys { get;set; }
        
        [JsonProperty("device_key", NullValueHandling = NullValueHandling.Ignore)]
        public string DeviceKey { get;set; }
        
        public virtual void Validate()
        {
            if (string.IsNullOrWhiteSpace(Body)) throw new ArgumentNullException(nameof(Body), "Body is required.");
            if (string.IsNullOrWhiteSpace(Title)) throw new ArgumentNullException(nameof(Title), "Title is required.");
            if (DeviceKeys is not null && DeviceKeys.Any() is true && string.IsNullOrWhiteSpace(DeviceKey)) throw new ArgumentNullException(nameof(DeviceKeys), "DeviceKeys is required.");
        }
    }

    public partial class BarkNotificationExtendedModel : BarkNotificationBaseModel, IValidatable
    {
        [JsonProperty("level", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(NotificationLevelConverter))]
        public NotificationLevel? Level { get; set; }

        [JsonProperty("badge", NullValueHandling = NullValueHandling.Ignore)]
        public long? Badge { get; set; }

        [JsonProperty("autoCopy", NullValueHandling = NullValueHandling.Ignore)]
        public long? AutoCopy { get; set; }

        [JsonProperty("copy", NullValueHandling = NullValueHandling.Ignore)]
        public string Copy { get; set; }

        [JsonProperty("sound", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(NotificationSoundConverter))]
        public NotificationSound? Sound { get; set; }

        [JsonProperty("call", NullValueHandling = NullValueHandling.Ignore)]
        public long? Call { get; set; }

        [JsonProperty("icon", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Icon { get; set; }

        [JsonProperty("group", NullValueHandling = NullValueHandling.Ignore)]
        public string Group { get; set; }

        [JsonProperty("ciphertext", NullValueHandling = NullValueHandling.Ignore)]
        public string Ciphertext { get; set; }

        [JsonProperty("volume", NullValueHandling = NullValueHandling.Ignore)]
        public long? Volume { get; set; }

        [JsonProperty("isArchive", NullValueHandling = NullValueHandling.Ignore)]
        public long? IsArchive { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public string Url { get; set; }
        
        public override void Validate()
        {
            base.Validate();
            if (Badge is not null and < 0) throw new ArgumentOutOfRangeException(nameof(Badge), "Badge can not be less than 0.");
            if (Volume is not null and < 0 or >10) throw new ArgumentOutOfRangeException(nameof(Volume), $"Volume({Volume}) can not be less than 0 or greater than 10.");
        }

        public static T FromJson<T>(string json) where T : BarkNotificationBaseModel
        {
            return JsonConvert.DeserializeObject<T>(json, BarkNotificationPostModelConverter.Settings);
        }
    }

    public static class BarkNotificationPostModelSerialize
    {
        public static string ToJson<T>(this T self) where T : BarkNotificationBaseModel
        {
            return JsonConvert.SerializeObject(self, BarkNotificationPostModelConverter.Settings);
        }
    }

    internal static class BarkNotificationPostModelConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
    
    internal class NotificationLevelConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(NotificationLevel) || t == typeof(NotificationLevel?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "critical":
                    return NotificationLevel.Critical;
                case "active":
                    return NotificationLevel.Active;
                case "timeSensitive":
                    return NotificationLevel.TimeSensitive;
                case "passive":
                    return NotificationLevel.Passive;
            }
            throw new Exception("Cannot unmarshal type ThemeName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (NotificationLevel)untypedValue;
            switch (value)
            {
                case NotificationLevel.Critical:
                    serializer.Serialize(writer, "critical");
                    return;
                case NotificationLevel.Active:
                    serializer.Serialize(writer, "active");
                    return;
                case NotificationLevel.TimeSensitive:
                    serializer.Serialize(writer, "timeSensitive");
                    return;
                case NotificationLevel.Passive:
                    serializer.Serialize(writer, "passive");
                    return;
            }
            throw new Exception("Cannot marshal type NotificationLevel");
        }

        public static readonly NotificationLevelConverter Singleton = new NotificationLevelConverter();
    }
    
    internal class NotificationSoundConverter : JsonConverter
{
    public override bool CanConvert(Type t) => t == typeof(NotificationSound) || t == typeof(NotificationSound?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
        if (reader.TokenType == JsonToken.Null) return null;
        var value = serializer.Deserialize<string>(reader);
        switch (value)
        {
            case "alarm":
                return NotificationSound.Alarm;
            case "anticipate":
                return NotificationSound.Anticipate;
            case "bell":
                return NotificationSound.Bell;
            case "birdsong":
                return NotificationSound.Birdsong;
            case "bloom":
                return NotificationSound.Bloom;
            case "calypso":
                return NotificationSound.Calypso;
            case "chime":
                return NotificationSound.Chime;
            case "choo":
                return NotificationSound.Choo;
            case "descent":
                return NotificationSound.Descent;
            case "electronic":
                return NotificationSound.Electronic;
            case "fanfare":
                return NotificationSound.Fanfare;
            case "glass":
                return NotificationSound.Glass;
            case "gotosleep":
                return NotificationSound.GoToSleep;
            case "healthnotification":
                return NotificationSound.HealthNotification;
            case "horn":
                return NotificationSound.Horn;
            case "ladder":
                return NotificationSound.Ladder;
            case "mailsent":
                return NotificationSound.MailSent;
            case "minuet":
                return NotificationSound.Minuet;
            case "multiwayinvitation":
                return NotificationSound.MultiwayInvitation;
            case "newmail":
                return NotificationSound.NewMail;
            case "newsflash":
                return NotificationSound.NewsFlash;
            case "noir":
                return NotificationSound.Noir;
            case "paymentsuccess":
                return NotificationSound.PaymentSuccess;
            case "shake":
                return NotificationSound.Shake;
            case "sherwoodforest":
                return NotificationSound.SherwoodForest;
            case "silence":
                return NotificationSound.Silence;
            case "spell":
                return NotificationSound.Spell;
            case "suspense":
                return NotificationSound.Suspense;
            case "telegraph":
                return NotificationSound.Telegraph;
            case "tiptoes":
                return NotificationSound.Tiptoes;
            case "typewriters":
                return NotificationSound.Typewriters;
            case "update":
                return NotificationSound.Update;
        }
        throw new Exception("Cannot unmarshal type NotificationSound");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
        if (untypedValue == null)
        {
            serializer.Serialize(writer, null);
            return;
        }
        var value = (NotificationSound)untypedValue;
        switch (value)
        {
            case NotificationSound.Alarm:
                serializer.Serialize(writer, "alarm");
                return;
            case NotificationSound.Anticipate:
                serializer.Serialize(writer, "anticipate");
                return;
            case NotificationSound.Bell:
                serializer.Serialize(writer, "bell");
                return;
            case NotificationSound.Birdsong:
                serializer.Serialize(writer, "birdsong");
                return;
            case NotificationSound.Bloom:
                serializer.Serialize(writer, "bloom");
                return;
            case NotificationSound.Calypso:
                serializer.Serialize(writer, "calypso");
                return;
            case NotificationSound.Chime:
                serializer.Serialize(writer, "chime");
                return;
            case NotificationSound.Choo:
                serializer.Serialize(writer, "choo");
                return;
            case NotificationSound.Descent:
                serializer.Serialize(writer, "descent");
                return;
            case NotificationSound.Electronic:
                serializer.Serialize(writer, "electronic");
                return;
            case NotificationSound.Fanfare:
                serializer.Serialize(writer, "fanfare");
                return;
            case NotificationSound.Glass:
                serializer.Serialize(writer, "glass");
                return;
            case NotificationSound.GoToSleep:
                serializer.Serialize(writer, "gotosleep");
                return;
            case NotificationSound.HealthNotification:
                serializer.Serialize(writer, "healthnotification");
                return;
            case NotificationSound.Horn:
                serializer.Serialize(writer, "horn");
                return;
            case NotificationSound.Ladder:
                serializer.Serialize(writer, "ladder");
                return;
            case NotificationSound.MailSent:
                serializer.Serialize(writer, "mailsent");
                return;
            case NotificationSound.Minuet:
                serializer.Serialize(writer, "minuet");
                return;
            case NotificationSound.MultiwayInvitation:
                serializer.Serialize(writer, "multiwayinvitation");
                return;
            case NotificationSound.NewMail:
                serializer.Serialize(writer, "newmail");
                return;
            case NotificationSound.NewsFlash:
                serializer.Serialize(writer, "newsflash");
                return;
            case NotificationSound.Noir:
                serializer.Serialize(writer, "noir");
                return;
            case NotificationSound.PaymentSuccess:
                serializer.Serialize(writer, "paymentsuccess");
                return;
            case NotificationSound.Shake:
                serializer.Serialize(writer, "shake");
                return;
            case NotificationSound.SherwoodForest:
                serializer.Serialize(writer, "sherwoodforest");
                return;
            case NotificationSound.Silence:
                serializer.Serialize(writer, "silence");
                return;
            case NotificationSound.Spell:
                serializer.Serialize(writer, "spell");
                return;
            case NotificationSound.Suspense:
                serializer.Serialize(writer, "suspense");
                return;
            case NotificationSound.Telegraph:
                serializer.Serialize(writer, "telegraph");
                return;
            case NotificationSound.Tiptoes:
                serializer.Serialize(writer, "tiptoes");
                return;
            case NotificationSound.Typewriters:
                serializer.Serialize(writer, "typewriters");
                return;
            case NotificationSound.Update:
                serializer.Serialize(writer, "update");
                return;
        }
        throw new Exception("Cannot marshal type NotificationSound");
    }

    public static readonly NotificationSoundConverter Singleton = new NotificationSoundConverter();
}
}
